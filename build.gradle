plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'net.neoforged.moddev' version '2.0.88'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()

    //KubeJS
    maven {
        name = "Latvian"
        url = "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
        content {
            includeGroup "com.github.rtyley"
        }
    }
    flatDir {
        dir 'libs'
    }
    maven {
        // Add curse maven to repositories
        name = "Curse Maven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven { url "https://maven.architectury.dev/" }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        // location of the maven that hosts JEI files since January 2023
        // Patchouli
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers.add('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    //JEI
    compileOnly ("mezz.jei:jei-1.21.1-neoforge-api:19.25.0.322")
    implementation ("mezz.jei:jei-1.21.1-neoforge:19.25.0.322")

    // KubeJS
    implementation "dev.latvian.mods:rhino:${rhino_version}"
    implementation "dev.latvian.mods:kubejs-neoforge:${kubejs_version}"

    // Sodium
    implementation "maven.modrinth:AANobbMI:Pb3OXVqC"

    // Kiwi
    implementation ("curse.maven:kiwi-303657:7082554")

    // OELib
    implementation "curse.maven:oelib-1319210:6882494"
    implementation "curse.maven:architectury-api-419699:5786327"

    // Contact
    implementation "curse.maven:contact-love-rekindled-1326820:6895781"

    // TLM
    implementation "curse.maven:touhou-little-maid-355044:6988538"

    // Patchouli
    compileOnly "vazkii.patchouli:Patchouli:${patchouli_version}:api"
    runtimeOnly "vazkii.patchouli:Patchouli:${patchouli_version}"

    // Curios
    compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}:api"
    implementation "top.theillusivec4.curios:curios-neoforge:${curios_version}"

    // Cloth Config
    implementation "me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}"

    // Jupiter
    implementation "curse.maven:jupiter-1072905:6843052"

    // Jade
    implementation "curse.maven:jade-324717:6853386"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}


// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}